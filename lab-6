#topological sort using dfs
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Adjacency list representation
int adj[MAX][MAX];
int visited[MAX];
int stack[MAX];
int top = -1;
int V;  // Number of vertices

// Function to add an edge from u to v
void addEdge(int u, int v) {
    adj[u][v] = 1;
}

// DFS function
void dfs(int v) {
    visited[v] = 1;

    for (int i = 0; i < V; i++) {
        if (adj[v][i] && !visited[i]) {
            dfs(i);
        }
    }

    // Push to stack after visiting all neighbors
    stack[++top] = v;
}

// Function to perform topological sort
void topologicalSort() {
    for (int i = 0; i < V; i++)
        visited[i] = 0;

    for (int i = 0; i < V; i++) {
        if (!visited[i])
            dfs(i);
    }

    printf("Topological Sort (DFS): ");
    while (top >= 0)
        printf("%d ", stack[top--]);
    printf("\n");
}
